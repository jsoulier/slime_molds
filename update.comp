/* TODO: delta time */

#version 450

#include "config.h"

struct agent_t
{
    vec2 position;
    float angle;
    uint color;
};

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
layout(set = 0, binding = 0) uniform sampler3D s_trail_read;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image3D i_trail_write;
layout(set = 1, binding = 1) buffer t_agents
{
    agent_t b_agents[];
};

float rand(const vec2 position)
{
    return fract(sin(dot(position, vec2(12.9898, 78.233))) * 43758.5453);
}

void main()
{
    const uvec2 id = gl_GlobalInvocationID.xy;
    if (id.x >= WIDTH || id.y >= HEIGHT)
    {
        return;
    }
    if (id.x % POPULATION != 0 || id.y % POPULATION != 0)
    {
        return;
    }
    agent_t agent = b_agents[id.y * WIDTH + id.x];
    if (agent.position.x < 0 || agent.position.y < 0 ||
        agent.position.x >= WIDTH || agent.position.y >= HEIGHT)
    {
        agent.position.x = clamp(agent.position.x, 0, WIDTH - 1);
        agent.position.y = clamp(agent.position.y, 0, HEIGHT - 1);
        agent.angle = rand(id) * 2 * 3.14;
    }
    const float angles[] = float[SENSORS]
    (
        agent.angle - SENSE_ANGLE,
        agent.angle,
        agent.angle + SENSE_ANGLE
    );
    vec2 directions[SENSORS];
    for (int i = 0; i < SENSORS; i++)
    {
        directions[i] = vec2(cos(angles[i]), sin(angles[i]));
    }
    ivec2 positions[SENSORS];
    for (int i = 0; i < SENSORS; i++)
    {
        positions[i] = ivec2(agent.position + directions[i] * SENSE_DISTANCE);
    }
    float counts[SENSORS];
    for (int i = 0; i < SENSORS; i++)
    {
        counts[i] = 0;
        for (int x = -SENSE_SIZE; x <= SENSE_SIZE; x++)
        for (int y = -SENSE_SIZE; y <= SENSE_SIZE; y++)
        {
            const ivec2 coord = positions[i] + ivec2(x, y);
            counts[i] += texelFetch(s_trail_read, ivec3(coord, agent.color), 0).x;
        }
        counts[i] /= pow(SENSE_SIZE * 2 + 1, 2);
    }
    if (counts[1] > counts[0] && counts[1] > counts[2])
    {
        /* pass */
    }
    else if (counts[1] < counts[0] && counts[1] < counts[2])
    {
        /* TODO */
    }
    else if (counts[2] > counts[0])
    {
        agent.angle += AGENT_STEER_SPEED;
    }
    else if (counts[0] > counts[2])
    {
        agent.angle -= AGENT_STEER_SPEED;
    }
    const vec2 direction = vec2(cos(agent.angle), sin(agent.angle));
    agent.position += AGENT_SPEED * direction;
    float trail = texelFetch(s_trail_read, ivec3(agent.position, agent.color), 0).x;
    imageStore(i_trail_write, ivec3(agent.position, agent.color), vec4(trail + 1.0f));
    b_agents[id.y * WIDTH + id.x] = agent;
}